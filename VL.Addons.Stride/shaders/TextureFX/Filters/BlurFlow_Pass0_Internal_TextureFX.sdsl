[Category("Filter.Blur")]
[WantsMips("Texture0")]

shader BlurFlow_Pass0_Internal_TextureFX : FilterBase, AddonShaderUtils
{
	[Default(0.5f)]
    compose ComputeFloat Strength;

    [Default(0.5f)]
    compose ComputeFloat MapSmooth;

    [Default(0.5f)]
    compose ComputeFloat Width;

    [Default(0.5f)]
    compose ComputeFloat Direction;


    float4 Filter(float4 tex0col)
    {
        float2 uv = streams.TexCoord;
        float mapSmooth = MapSmooth.Compute();
        float direction = Direction.Compute();

        float lod=1+saturate(mapSmooth)*Lod(ViewSize);
        float4 c=0;
        float kk=0;
        float wd=abs(pows(1,.1))*.25*Width.Compute();
        float ang=abs(Texture1.Sample(LinearSampler,uv).x-.5);
        float2 dir=sin((ang+direction+float2(0,.25))*acos(-1)*2);
        float2 off=abs(pows(2,mapSmooth*6)*ViewSize/ViewSize.x);

        dir=float2(Texture1.SampleLevel(LinearSampler,uv-off*float2(1,0)/ViewSize,lod).g-
			       Texture1.SampleLevel(LinearSampler,uv+off*float2(1,0)/ViewSize,lod).g,
			       Texture1.SampleLevel(LinearSampler,uv-off*float2(0,1)/ViewSize,lod).g-
			       Texture1.SampleLevel(LinearSampler,uv+off*float2(0,1)/ViewSize,lod).g);

        dir=normalize(r2d(dir,direction/2+.25))*abs(pows(length(dir.xy),1))*158*abs(pows(2,mapSmooth*6));
        for (float i=0;i<1;i+=1./16){
            float k=1;
            c+=Texture0.Sample(LinearSampler,((uv-.5)+wd*dir*wd*(i))+.5)*k;
            kk+=k;
        }
        c=c/kk;
        return c;
    }
};