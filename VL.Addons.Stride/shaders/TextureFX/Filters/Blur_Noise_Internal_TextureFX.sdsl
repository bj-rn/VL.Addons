[Category("Filter.Blur")]
[Summary("Applies a blur effect")]
[WantsMips("Texture0")]

shader Blur_Noise_Internal_TextureFX : FilterBase, AddonShaderUtils
{
    [Default(0.0f)]
    compose ComputeFloat Time; 

	[Default(1.0f)]
    compose ComputeFloat Size; 

	int Iterations;

	float hash( float n )
	{
		return frac(sin(n) * 43758.5453);
	}

	float noise( in float2 x )
	{
		float2 p = floor(x);
		float2 f = frac(x);
		f = f * f * (3.0 - 2.0 * f);
		float n = p.x + p.y * 57.0;
		return lerp(lerp(hash(n+0.0), hash(n+1.0), f.x), lerp( hash(n+57.0), hash(n+58.0), f.x), f.y);
	}

	float2 map( float2 p, in float offset )
	{
		float time = Time.Compute();
		p.x += 0.1*sin( time + 2.0*p.y ) ;
		p.y += 0.1*sin( time + 2.0*p.x ) ;
	
		float a = noise(p * Size.Compute() + sin(0.1 * time)) * 6.2831;
		a -= offset;
		return float2( cos(a), sin(a) );
	}

    float4 Filter(float4 tex0col)
    {
		float2 p = streams.TexCoord;
		float2 uv =  p;
		//uv.x *= ViewSize.x / ViewSize.y;
		
		float2 offset = Time.Compute() + streams.TexCoord.x / ViewSize.x;
    
		float acc = 0.0;
		float3  col = float(0.0);

		for( int i=0; i<Iterations; i++ )
		{
			float2 dir = map( uv, offset );
		
			float h = float(i)/32.0;
			float w = 4.0*h*(1.0-h);
		
			float3 ttt = w*Texture0.SampleLevel(LinearSampler, uv, 0).xyz;
			ttt *= lerp( float3(0.6,0.7,0.7), float3(1.0,0.95,0.9), 0.5 - 0.5*dot( reflect(float3(dir,0.0), float3(1.0,0.0,0.0)).xy, float(0.707)));
			col += w * ttt;
			acc += w;
			uv += 0.008 * dir;
		}

		col /= acc;
    
		float gg = dot( col, float(0.333) );
		float3 nor = normalize( float3( ddx(gg), 0.5, ddy(gg) ) );
		col += float(0.4)*dot( nor, float3(0.7,0.01,0.7) );

		float2 di = map( uv, offset );
		col *= 0.65 + 0.35*dot( di, float(0.707) );
		col *= 0.20 + 0.80*pow( abs(4.0*p.x*(1.0-p.x)), 0.1 );
		col *= 1.7;

		return float4( col, 1.0 );
    }
};