// source:
// https://raw.githubusercontent.com/mrvux/dx11-vvvv-girlpower/master/nodes/texture11/Filter/UnsharpMask.tfx

[Category("Filter.Enhancement")]
[Summary("")]
[WantsMips("Texture0")]

shader UnsharpMask_Internal_TextureFX : FilterBase, AddonShaderUtils
{
	[Default(0.25)]
    compose ComputeFloat Amount;

    [Default(0.5)]
    compose ComputeFloat Shape;

    [Default(0.25)]
    compose ComputeFloat Saturation;

    [Default(0.0)]
    compose ComputeFloat MinRadius;

    [Default(1.0)]
    compose ComputeFloat MaxRadius;

    [Default(1.0)]
    compose ComputeFloat Gamma;


    float4 Filter(float4 tex0col)
    {
        float2 uv = streams.TexCoord;
        float4 c = Texture0.SampleLevel(LinearSampler, uv,0);
        float maxl = Lod(ViewSize);
        float4 sh = 0;

        float amount = Amount.Compute();
        float shape = Shape.Compute();
        float minRadius = MinRadius.Compute();
        float maxRadius = MaxRadius.Compute();

        for (float i=0; i<7; i++)
        {
            sh.rgb+=(Texture0.SampleLevel(LinearSampler, uv, maxl*saturate(maxRadius*lerp(i, 7, minRadius)/7)) 
            - Texture0.SampleLevel(LinearSampler, uv, maxl*saturate(maxRadius*(lerp(i,7,minRadius)+1)/7))).rgb
    	    /pow(2,lerp(i,7,minRadius)*shape)*4*amount/pow(2, maxRadius/max(ViewSize.x, ViewSize.y) * pow(2, maxl*maxRadius));
        }

        sh.rgb = lerp(dot(sh.rgb,1.)/3., sh.rgb, Saturation.Compute());
        sh.rgb = sign(sh.rgb) * pow(abs(sh.rgb)*5, pow(2, Gamma.Compute()*2))/5;
        sh /= 1+c;
        c.rgb += sh.rgb * pow(pow(2, 3*min(shape, 0)), 2);

	    c = max(0, c);
        return c;
    }
};