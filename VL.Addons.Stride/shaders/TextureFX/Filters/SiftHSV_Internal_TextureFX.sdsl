//source : https://beta.vvvv.org/contributions/effects/sifthsv/index.html

[Category("Filter.Keying")]
[Summary("")]
[Tags("")]

shader SiftHSV_Internal_TextureFX : FilterBase
{
    [Default(1.0f)]
    compose ComputeFloat ValTol;

    [Default(1.0f)]
    compose ComputeFloat SatTol;

    [Default(1.0f)]
    compose ComputeFloat HueTol;

    [Default(1.0f)]
    compose ComputeFloat NONMatch;

    [Default(0.0f, 0.0f, 0.0f, 1.0f)]
    compose ComputeColor RefCol;


    [Default(0.0f, 0.0f, 0.0f, 1.0f)]
    compose ComputeColor ReplaceMatchRefColor;

    [Default(0.0f, 0.0f, 0.0f, 1.0f)]
    compose ComputeColor ReplaceNONmatchRefColor;

    [Default(1.0f, 1.0f, 1.0f, 1.0f)]
    compose ComputeColor ReferenceColor;

    bool SwitchMatchColTex;
    bool SwitchNONmatchColTex;

    float4   SiftHSV (float4 InputColor, float4 ReferenceColor, float HueRange, float SatRange, float ValRange)
    {
        float InputHue = RGBtoHSV(InputColor.rgb).x;
        float InputSat = RGBtoHSV(InputColor.rgb).y;
        float InputVal = RGBtoHSV(InputColor.rgb).z;

        float ReferenceHue = RGBtoHSV(ReferenceColor.rgb).x;
        float ReferenceSat = RGBtoHSV(ReferenceColor.rgb).y;
        float ReferenceVal = RGBtoHSV(ReferenceColor.rgb).z;

        float4 Result;

        float4 SWITCH = float4(1.0f, 1.0f, 1.0f, 1.0f);

        if ((( InputHue - ReferenceHue + 2 )  % 1 - 0.5f ) <= ( HueRange -0.5f ) && (abs(InputSat - ReferenceSat) < SatRange) && (abs(InputVal - ReferenceVal) < ValRange ))
        {
            SWITCH.rgb = 1.0f;
        }
        else   
        {
            SWITCH.rgb = 0.0f;
        }

        SWITCH  = smoothstep(HueRange, 0, abs( InputHue - ReferenceHue));
        SWITCH *= smoothstep(SatRange, 0, abs( InputSat - ReferenceSat));
        SWITCH *= smoothstep(ValRange, 0, abs( InputVal - ReferenceVal));

        return SWITCH;
    }


    float4 Filter(float4 tex0col)
    {
        float2 uv = streams.TexCoord;
        float4 Result  =  Texture0.SampleLevel(LinearSampler, uv, 0);
        float4 Match =  lerp(ReplaceMatchRefColor.Compute(), Texture1.SampleLevel(LinearSampler, uv, 0), SwitchMatchColTex);
        float4 NONmatch =  lerp(ReplaceNONmatchRefColor.Compute(), Texture2.SampleLevel(LinearSampler, uv, 0), SwitchNONmatchColTex);
      
        Result = Match * SiftHSV(Result, ReferenceColor.Compute(), HueTol.Compute(), SatTol.Compute(), ValTol.Compute()) + NONmatch * ( 1 - SiftHSV(Result, RefCol.Compute(), HueTol.Compute(), SatTol.Compute(), ValTol.Compute()));  
        return Result;
    }
};


