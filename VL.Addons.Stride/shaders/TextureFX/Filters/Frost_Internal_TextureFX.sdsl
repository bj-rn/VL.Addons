// source:
// https://raw.githubusercontent.com/mrvux/dx11-vvvv-girlpower/master/nodes/texture11/Filter/UnsharpMask.tfx

[Category("Filter.Enhancement")]
[Summary("")]

shader Frost_Internal_TextureFX : FilterBase, AddonShaderUtils
{
	[Default(10.0f, 10.0f)]
    compose ComputeFloat2 Pixel;

    [Default(3.0f)]
    compose ComputeFloat Frequency;

    stage SamplerState LinearMirrorSampler
    {
        Filter = MIN_MAG_MIP_LINEAR;
        AddressU = Mirror;
        AddressV = Mirror;
    };

	float3 NOISE2D(float2 p)
	{ 
		return Texture1.SampleLevel(LinearMirrorSampler, p, 0).xyz;
	}


	float4 spline(float x, float4 c1, float4 c2, float4 c3, float4 c4, float4 c5, float4 c6, float4 c7, float4 c8, float4 c9)
    {
      float w1, w2, w3, w4, w5, w6, w7, w8, w9;
      w1 = 0.0;
      w2 = 0.0;
      w3 = 0.0;
      w4 = 0.0;
      w5 = 0.0;
      w6 = 0.0;
      w7 = 0.0;
      w8 = 0.0;
      w9 = 0.0;

      float tmp = x * 8.0;

      if (tmp<=1.0) {
        w1 = 1.0 - tmp;
        w2 = tmp;
      }
      else if (tmp<=2.0) {
        tmp = tmp - 1.0;
        w2 = 1.0 - tmp;
        w3 = tmp;
      }
      else if (tmp<=3.0) {
        tmp = tmp - 2.0;
        w3 = 1.0-tmp;
        w4 = tmp;
      }
      else if (tmp<=4.0) {
        tmp = tmp - 3.0;
        w4 = 1.0-tmp;
        w5 = tmp;
      }
      else if (tmp<=5.0) {
        tmp = tmp - 4.0;
        w5 = 1.0-tmp;
        w6 = tmp;
      }
      else if (tmp<=6.0) {
        tmp = tmp - 5.0;
        w6 = 1.0-tmp;
        w7 = tmp;
      }
      else if (tmp<=7.0) {
        tmp = tmp - 6.0;
        w7 = 1.0 - tmp;
        w8 = tmp;
      }
      else
      {
        tmp = clamp(tmp - 7.0, 0.0, 1.0);
        w8 = 1.0-tmp;
        w9 = tmp;
      }

      return w1*c1 + w2*c2 + w3*c3 + w4*c4 + w5*c5 + w6*c6 + w7*c7 + w8*c8 + w9*c9;
    }


    float4 Filter(float4 tex0col)
    {
        float2 uv = streams.TexCoord;
    	float3 tc = float3(1.0, 0.0, 0.0);
        float2 pixel = Pixel.Compute();

		float DeltaX = pixel.x / ViewSize.x;
		float DeltaY = pixel.y / ViewSize.y;
		float2 ox = float2(DeltaX, 0.0);
		float2 oy = float2(0.0, DeltaY);
		float2 PP = uv - oy;

		float4 C00 = Texture0.SampleLevel(LinearSampler, PP - ox, 0);
		float4 C01 = Texture0.SampleLevel(LinearSampler, PP, 0);
		float4 C02 = Texture0.SampleLevel(LinearSampler, PP + ox, 0);

		PP = uv;

		float4 C10 = Texture0.SampleLevel(LinearSampler, PP - ox, 0);
		float4 C11 = Texture0.SampleLevel(LinearSampler, PP,0);
		float4 C12 = Texture0.SampleLevel(LinearSampler, PP + ox, 0);

		PP = uv + oy;

		float4 C20 = Texture0.SampleLevel(LinearSampler, PP - ox, 0);
		float4 C21 = Texture0.SampleLevel(LinearSampler, PP, 0);
		float4 C22 = Texture0.SampleLevel(LinearSampler, PP + ox, 0);

		float n = GetLuminance(NOISE2D(Frequency.Compute()*uv));
		n = (n % 0.111111)/0.111111;
		float4 result = spline(n, C00, C01, C02, C10, C11, C12, C20, C21, C22);
		//tc = result.rgb;

		return result;
    }
};