// sauce: https://blog.maximeheckel.com/posts/on-crafting-painterly-shaders

[Category("Filter")]
[Summary("")]
shader Kuwahara_Anisotropic_Internal_TextureFX : FilterBase
{
    #define SECTOR_COUNT 8

    [Default(8.0)]
    compose ComputeFloat Radius;

    float3 lessThan(float3 a, float3 b) 
    {
        return float3(
                    a.x < b.x ? 1.0 : 0.0,
                    a.y < b.y ? 1.0 : 0.0,
                    a.z < b.z ? 1.0 : 0.0 );
    }

    float4 fromLinear(float4 linearRGB) 
    {
        float3 cutoff = lessThan(linearRGB.rgb, float3(0.0031308, 0.0031308, 0.0031308));
        float3 higher = float3(1.055, 1.055, 1.055)*pow(linearRGB.rgb, float3(1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4)) - float3(0.055, 0.055, 0.055);
        float3 lower = linearRGB.rgb * float3(12.92, 12.92, 12.92);

        return float4(lerp(higher, lower, cutoff), linearRGB.a);
    }

    float3 sampleColor(float2 offset) 
    {
        float2 coord = streams.TexCoord + (offset / ViewSize);
        return Texture0.Sample(Sampler0, coord).rgb;
    }

    float4 getDominantOrientation(float4 structureTensor)
    {
        float Jxx = structureTensor.r; 
        float Jyy = structureTensor.g; 
        float Jxy = structureTensor.b; 

        float trace = Jxx + Jyy;
        float determinant = Jxx * Jyy - Jxy * Jxy;

        float lambda1 = trace * 0.5 + sqrt(trace * trace * 0.25 - determinant);
        float lambda2 = trace * 0.5 - sqrt(trace * trace * 0.25 - determinant);
    
        float jxyStrength = abs(Jxy) / (abs(Jxx) + abs(Jyy) + abs(Jxy) + 1e-7);

        float2 v;
    
        if (jxyStrength > 0.0)
        {
            v = normalize(float2(-Jxy, Jxx - lambda1));
        } 
        else 
        {
            v = float2(0.0, 1.0);
        }

        return float4(normalize(v), lambda1, lambda2);
    }

    float polynomialWeight(float x, float y, float eta, float lambda) 
    {
        float polyValue = (x + eta) - lambda * (y * y);
    
        return max(0.0, polyValue * polyValue);
    }



    void getSectorVarianceAndAverageColor(float2x2 anisotropyMat, float angle, float radius, out float3 avgColor, out float variance) 
    {
        float3 weightedColorSum = float3(0.0, 0.0, 0.0);
        float3 weightedSquaredColorSum = float3(0.0, 0.0, 0.0);
        float totalWeight = 0.0;

        float eta = 0.1;
        float lambda = 0.5;

        for (float r = 1.0; r <= radius; r += 1.0) 
        {
            for (float a = -0.392699; a <= 0.392699; a += 0.196349)
            {
                float2 sampleOffset = r * float2(cos(angle + a), sin(angle + a));
                sampleOffset = mul(anisotropyMat, sampleOffset);

                float3 color = sampleColor(sampleOffset);
                float weight = polynomialWeight(sampleOffset.x, sampleOffset.y, eta, lambda);

                weightedColorSum += color * weight;
                weightedSquaredColorSum += color * color * weight;
                totalWeight += weight;
            }
        }

        // Calculate average color and variance
        avgColor = weightedColorSum / totalWeight;
        float3 varianceRes = (weightedSquaredColorSum / totalWeight) - (avgColor * avgColor);
        variance = dot(varianceRes, float3(0.299, 0.587, 0.114)); // Convert to luminance
    }


    float4 Filter(float4 tex0col)
    {
        float4 structureTensor = InTex1();

        float3 sectorAvgColors[SECTOR_COUNT];
        float sectorVariances[SECTOR_COUNT];

        float4 orientationAndAnisotropy = getDominantOrientation(structureTensor);
        float2 orientation = orientationAndAnisotropy.xy;

        float anisotropy = (orientationAndAnisotropy.z - orientationAndAnisotropy.w) / (orientationAndAnisotropy.z + orientationAndAnisotropy.w + 1e-7);

        float alpha = 25.0;
        float scaleX = alpha / (anisotropy + alpha);
        float scaleY = (anisotropy + alpha) / alpha;

        float2x2 anisotropyMat = mul(float2x2(orientation.x, -orientation.y, orientation.y, orientation.x), float2x2(scaleX, 0.0, 0.0, scaleY));

        for (int i = 0; i < SECTOR_COUNT; i++) 
        {
            float angle = float(i) * 6.28318 / float(SECTOR_COUNT); // 2Ï€ / SECTOR_COUNT
            getSectorVarianceAndAverageColor(anisotropyMat, angle, float(Radius.Compute()), sectorAvgColors[i], sectorVariances[i]);
        }

        float minVariance = sectorVariances[0];
        float3 finalColor = sectorAvgColors[0];

        for (int i = 1; i < SECTOR_COUNT; i++) 
        {
            if (sectorVariances[i] < minVariance)
            {
                minVariance = sectorVariances[i];
                finalColor = sectorAvgColors[i];
            }
        }

        float4 color = float4(finalColor, 1.0);
        
        //return fromLinear(color);
        return color;
    }
};