// sauce: https://blog.maximeheckel.com/posts/post-processing-as-a-creative-medium "Bar Receipt"

[Category("Filter.Stylize")]
[Summary("Blocky pixelation that resembles a receipt printed with a thermal printer")]
shader ThermalPrinter_Internal_TextureFX : FilterBase
{
    [Default(8.0f)]
    compose ComputeFloat PixelSize;

    float random(float2 st)
    {
        return frac(sin(dot(st, float2(12.9898, 78.233))) * 43758.5453123);
    }

    float3 sat(float3 rgb, float adjustment)
    {
        const float3 W = float3(0.2125, 0.7154, 0.0721);
        float intensity = dot(rgb, W);
        return lerp(float3(intensity, intensity, intensity), rgb, adjustment);
    }

    float4 Filter(float4 tex0col)
    {
        
        float2 normalizedPixelSize = PixelSize.Compute() / ViewSize;
        
        float2 uv = streams.TexCoord;

        float2 uvPixel = normalizedPixelSize * floor(uv / normalizedPixelSize);
    
        float4 col = Texture0.Sample(LinearSampler, uvPixel);

        float luma = dot(float3(0.2126, 0.7152, 0.0722), col.rgb);

        float2 cellUV = frac(uv / normalizedPixelSize);
        float lineWidth = 0.0;

        if (luma > 0.0)
            lineWidth = 1.0;
        if (luma > 0.3)
            lineWidth = 0.7;
        if (luma > 0.5)
            lineWidth = 0.5;
        if (luma > 0.7)
            lineWidth = 0.3;
        if (luma > 0.9)
            lineWidth = 0.1;
        if (luma > 0.99)
            lineWidth = 0.0;

        float yStart = 0.05;
        float yEnd = 0.95;

        if (cellUV.y > yStart && cellUV.y < yEnd && cellUV.x > 0.0 && cellUV.x < lineWidth)
            col = float4(0.0, 0.0, 0.0, 1.0);
        else
            col = float4(0.70, 0.74, 0.73, 1.0);
        
        return col;
    }
};