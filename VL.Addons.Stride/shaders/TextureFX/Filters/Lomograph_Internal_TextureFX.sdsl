// source:
// https://github.com/mrvux/dx11-vvvv-girlpower/blob/master/nodes/texture11/Filter/Lomograph.tfx

[Category("Filter.ColorManipulation")]
[Summary("Applies fancy coloring schemes and a vignette")]
[Tags("colorize instagram sepia")]
[DontConvertToLinearOnRead]
[DontConvertToSRgbOnWrite]


shader Lomograph_Internal_TextureFX : FilterBase
{
    [Defaul(0.1f)]
    compose ComputeFloat VignetteStart;

    [Defaul(0.25f)]
    compose ComputeFloat VignetteAmount;

    [Defaul(0.1f)]
    compose ComputeFloat VignetteDodge;

    [Defaul(0.6f)]
    compose ComputeFloat Color;

    [Defaul(0.5f)]
    compose ComputeFloat Contrast;

    [Defaul(0.5f)]
    compose ComputeFloat Level;

    [Defaul(0.5f)]
    compose ComputeFloat Effect;

    int Type = 0;

    int Iterations = 4;

    float3 EffectShape1(float3 x, float eff)
    {
        float4 B = float4(0.49, -1.04, 1.24, 0.24);
        float4 G = float4(-0.64, 0.56, 0.98, 0.09);
        float4 R = float4(-0.42, 0.83, 0.5, 0.09);

        x.r = lerp(x, x*x*x*R.x + x*x*R.y + x*R.z+R.w, eff).r;
        x.g = lerp(x, x*x*x*G.x + x*x*G.y  +x*G.z+G.w, eff).g;
        x.b = lerp(x, max(.24, x*x*x*B.x + x*x*B.y + x*B.z + B.w), eff).b;

        return x;
    };

    float3 EffectShape2(float3 x, float eff)
    {
        float4 B = float4(0.1, -0.38, 0.98, 0.23);
        float4 G = float4(-1.47, 1.92, 0.44, 0.11);
        float4 R = float4(-1.17, 2.46, -0.1, 0.11);

        eff *= 4./5.;

        x.r = lerp(x, x*x*x*R.x  +x*x*R.y + x*R.z + R.w, eff).r;
        x.g = lerp(x, x*x*x*G.x + x*x*G.y + x*G.z + G.w, eff).g;
        x.b = lerp(x, x*x*x*B.x  +x*x*B.y + x*B.z  +B.w, eff).b;

        return x;
    }

    float3 EffectShape3(float3 x, float eff)
    {
        float4 B = float4(-0.84, 0.94, 0.6, 0.04);
        float4 G = float4(-0.84, 1.14, 0.6, 0.0);
        float4 R = float4(4.07, -1.31, 0.0, -1.76);

        eff *= 4./5.;

        x.r = lerp(x, x*x*x*R.x + x*x*R.y + x*R.z + R.w*x*x*x*x*x, eff).r;
        x.g = lerp(x, x*x*x*G.x + x*x*G.y + x*G.z + G.w, eff).g;
        x.b = lerp(x, x*x*x*B.x + x*x*B.y + x*B.z + B.w*x*x*x*x*x, eff).b;

        return x;
    }

    float3 EffectShape4(float3 x, float eff)
    {
        float4 B = float4(0.0, 0.0, 0.81, 0.09);
        float4 G = float4(-1.76, 2.58, 0.17, 0.0);
        float4 R = float4(-0.53, 2.24, -0.21, 0.0);

        eff *= 4./5.;

        x.r = lerp(x, min(1.3 - x*.3, x*x*x*R.x + x*x*R.y + x*R.z + R.w), eff).r;
        x.g = lerp(x, x*x*x*G.x + x*x*G.y + x*G.z + G.w, eff).g;
        x.b = lerp(x, max(.09, x*x*x*B.x + x*x*B.y + x*B.z + B.w), eff).b;

        return x;
    }

    float3 EffectShape5(float3 x, float eff)
    {
        float4 B = float4(0.0, 0.0, 1.5, -0.28);
        float4 G = float4(0.01, 0.0, 1.03, -0.02);
        float4 R = float4(0.0, 0.0, 0.77, 0.1);
        eff *= 4./5.;
        x.r = lerp(x, x*x*x*R.x + x*x*R.y + x*R.z + R.w, eff).r;
        x.g = lerp(x, x*x*x*G.x + x*x*G.y + x*G.z + G.w, eff).g;
        x.b = lerp(x, max(-.3*x, x*x*x*B.x + x*x*B.y + x*B.z + B.w), eff).b;

        return x;
    }

    float3 EffectShapeSEPIA(float3 x, float eff)
    {
        float4 B = float4(-0.31, 0.33, 0.8, 0.11);
        float4 G = float4(-2.53, 3.0, 0.03, 0.02);
        float4 R = float4(-1.24, 2.08, .14, .11);

        x.r = lerp(x, min(.66 + x*.32, x*x*x*R.x + x*x*R.y + x*R.z + R.w), eff).r;
        x.g = lerp(x, min(.43 + x*.53, x*x*x*G.x + x*x*G.y + x*G.z + G.w + x*x*x*x*x*.47), eff).g;
        x.b = max(.1*eff, lerp(x, x*x*x*B.x + x*x*B.y + x*B.z + B.w, eff).b);

        return x;
    }

    float3 EffectShapeE6C41(float3 x, float eff)
    {
        x = lerp(lerp(x, max(x.x, max(x.y, x.z)), .1), min(x.x, min(x.y, x.z)), .1);

        float3 y = x;

        float4 B = float4(-0.18, 0.96, -0.96, 1.0);
        float4 G = float4(0.55, -1.83, -0.61, 2.77);
        float4 R = float4(0.23, -0.74, 0.52, -0.01);

        x.g = lerp(x, x*.11 + x*x*G.w + x*x*x*G.z + x*x*x*x*G.y + x*x*x*x*x*x*x*G.x, eff).g;
        x.r = lerp(x, tanh(x*5 - 2.9)/2 + .5 + x*R.w + x*x*R.z + x*x*x*R.y + x*x*x*x*x*x*R.x, eff).r;
        x.b = lerp(x, tanh(x*13 - 2.2)/10 + .09 + x*B.w + x*x*B.z + x*x*x*B.y + x*x*x*x*x*x*B.x, eff).b;

        return x;
    }

    float3 EffectShapeBW(float3 x, float eff)
    {
        x = dot(x.xyz, normalize(float3(.36, .36, .28))/sqrt(3));

        return x;
    }

    float3 Vignette(float3 x, float glow, float amount, float start, float dodge)
    {
        start *= .6;

        float Sglow = max(0, glow-start)/(1-start);
        float Dglow = start-glow;
        
        x = x*(1-(1.3-pow(x, 2))*pow(max(0, Sglow*2), 1.5)*.6*amount);
        x *= 1 + pow(max(0, Dglow)*2, 2) * (x*5 - x*x*10 + 5*x*x*x) *2*dodge*pow(1.34-start, 2);
        
        return x;
    }

    float3 ColorLevel(float3 x, float level)
    {
        float4 k0 = float4(0.27, 0.11, 0.455, -0.006);
        float4 k1 = float4(-0.6, -0.13, 1.69, 0.00);

        x = lerp(min(x*x*x*k0.x + x*x*k0.y + x*k0.z + k0.w, .84), x, saturate(level*2));
        x = lerp(x, min(x*x*x*k1.x + x*x*k1.y + x*k1.z + k1.w + x*x*x*x*x*.07, 1.02),saturate(level*2-1));

        return x;
    }

    float3 ColorShape(float3 x, float color)
    {
        x += (color-.5) * float3(.0, .08, -.24);

        return x;
    }

    float3 ColorContrast(float3 x, float contrast)
    {
        float4 k0 = float4(-1.24, 1.84, 0.4, 0.0);
        x = lerp(x, x*x*x*k0.x + x*x*k0.y + x*k0.z + k0.w, contrast*(1+(.6-pow(abs(x-.5),.5))));
        
        return x;
    }

    // float3 sat(float3 c)
    // {
    //     col.rgb+=dot(col.rgb,.3);

    //     return c;
    // }

    // float vstep(float a, float b, float x)
    // {
    //     x = saturate((x-a)/(b-a));
    //     x += smoothstep(.8, 1 ,x)*.2;

    //     return x;
    // }

    float4 prepass(float4 col)
    {
        //col = pow(col, 1.0/2.2);
        float2 x = streams.TexCoord; 
        float2 R = ViewSize;

        float3 z = col.rgb;

        float itr = min(Iterations, 20);
        
        for (float i=0; i<itr; i++)
        {
            z = ColorShape(z, Color.Compute());
            z = Vignette(z, length((x - 0.5)*R/R.x), VignetteAmount.Compute(), VignetteStart.Compute(), VignetteDodge.Compute());
            z = ColorContrast(z, Contrast.Compute());
            z = ColorLevel(z, Level.Compute());
        }

        col.rgb = z;
        return col;
    }

    float4 Filter(float4 tex0col)
    {
        float4 col = prepass(tex0col);

         switch (Type)
         {
            case 0 : col.rgb = EffectShape1(col.rgb, Effect.Compute()); break;
            case 1 : col.rgb = EffectShape2(col.rgb, Effect.Compute()); break;
            case 2 : col.rgb = EffectShape3(col.rgb, Effect.Compute()); break;
            case 3 : col.rgb = EffectShape4(col.rgb, Effect.Compute()); break;
            case 4 : col.rgb = EffectShape5(col.rgb, Effect.Compute()); break;
            case 5 : col.rgb = EffectShapeE6C41(col.rgb, Effect.Compute()); break;
            case 6 : col.rgb = EffectShapeBW(col.rgb, Effect.Compute()); break;
            case 7 : col.rgb = EffectShapeSEPIA(col.rgb, Effect.Compute()); break;
         }

        return col;
        //return pow(col, 1/2.2);
    }
};