[Category("Filter.ColorManipulation")]
[Summary("")]

shader Levels_Internal_TextureFX : FilterBase
{
    [EnumType("VL.Stride.Effects.TextureFX.LevelsClampType")]
    int Type;

    // [Color] float4 fromBlack = float4(0,0,0,1);
    // [Color] float4 fromWhite = float4(1,1,1,1);
    // [Color] float4 toBlack = float4(0,0,0,1);
    // [Color] float4 toWhite = float4(1,1,1,1);

    [Default(0.0, 0.0, 0.0, 1.0)]
    compose ComputeColor FromBlack;    

     [Default(1.0, 1.0, 1.0, 1.0)]
    compose ComputeColor FromWhite;  

    [Default(0.0, 0.0, 0.0, 1.0)]
    compose ComputeColor ToBlack;    

    [Default(1.0, 1.0, 1.0, 1.0)]
    compose ComputeColor ToWhite;  


    [Default(1.0f)]
    compose ComputeFloat Gamma;

    float4 ClampNone(float4 col)
    {
        return col;
    }

    float4 ClampTop(float4 col)
    {
        return min(col,1);
    }

    float4 ClampBottom(float4 col)
    {
        return max(col,0);
    }

    float4 ClampBoth(float4 col)
    {
        return saturate(col);
    }

    float4 Filter(float4 tex0col)
    {
        
        float4 fromBlack = FromBlack.Compute();
        float4 fromWhite = FromWhite.Compute();

        float4 toBlack = ToBlack.Compute();
        float4 toWhite = ToWhite.Compute();
        
        
        float4 c = tex0col;
        float4 fromDelta = fromWhite - fromBlack;
        float4 cMin = c - fromBlack;
        c = cMin / fromDelta;
        c = isnan(c) ? cMin : c;
        c = sign(c) * pow(abs(c), Gamma.Compute());
        
        switch (Type)
        {
            case 0 : c = ClampNone(c); break;
            case 1 : c = ClampTop(c); break;
            case 2 : c = ClampBottom(c); break;
            case 3 : c = ClampBoth(c); break;
        }

        c = c * (toWhite - toBlack) + toBlack;
        return c;
    }
};