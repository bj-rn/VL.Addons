//https://www.shadertoy.com/view/lss3WS
//antokhio port to DX11

[TextureSource]
[Category("Source")]
[Summary("")]
[Tags("")]
[OutputFormat("R16G16B16A16_Float")]

shader Voronoi_Internal_TextureFX : TextureFX, AddonShaderUtils
{
	[Default(0.0f, 0.0f, 0.0f, 0.0f)]
    compose ComputeColor ColorA;

	[Default(1.0f, 1.0f, 1.0f, 1.0f)]
    compose ComputeColor ColorB;

    [Default(2.2f)]
    compose ComputeFloat Edge;


	float4x4 Transform;

	float2 rand22(in float2 p)
	{
		return frac(float2(sin(p.x * 591.32 + p.y * 154.077), cos(p.x * 391.32 + p.y * 49.077)));
	}

	float3 voronoi(in float2 x)
	{
		float2 n = floor(x); // grid cell id
		float2 f = frac(x); // grid internal position
		float2 mg; // shortest distance...
		float2 mr; // ..and second shortest distance
		float md = 8.0;
		float md2 = 2.0;

		for(int j = -1; j <= 1; j ++)
		{
			for(int i = -1; i <= 1; i ++)
			{
				float2 g = float2(float(i), float(j)); // cell id
				float2 o = rand22(n + g); // offset to edge point
				float2 r = g + o - f;
			
				float d = max(abs(r.x), abs(r.y)) * Edge.Compute(); // distance to the edge
			
				if(d < md)
				{
					md2 = md; 
					md = d; 
					mr = r; 
					mg = g;
				}
				else if(d < md2)
				{
					md2 = d;
				}
			}
		}

		return float3(n + mg, md2 - md);
	}

    stage override float4 Shading()
    {
		float2 uv = streams.TexCoord;
		float aspect = ViewSize.x / ViewSize.y;
		uv.x *= aspect;
		float3 col =  voronoi( (mul (uv, Transform)).xy);
		float4 c = float4 (smoothstep (0.0, 0.25, col.zzz) , 1);
		return lerp(ColorA.Compute(), ColorB.Compute(), c);
    }
};