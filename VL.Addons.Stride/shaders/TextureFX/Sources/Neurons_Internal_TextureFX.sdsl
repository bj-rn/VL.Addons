// source:
// https://shaders.skia.org/

[TextureSource]
[Category("Source.Noise")]
[Summary("Returns an endless neuronal structure")]

shader Neurons_Internal_TextureFX : TextureFX, AddonShaderUtils
{
    [Default(0.0f, 0.0f, 0.0f, 1.0f)]
    compose ComputeColor ColorA; 
    
    [Default(1.0f, 1.0f, 1.0f, 1.0f)]
    compose ComputeColor ColorB;
    
    [Default(0.0f)]
    compose ComputeFloat Time;
    
    [Default(0.0f)]
    compose ComputeFloat2 Scale;

    [Default(0.0f)]
    compose ComputeFloat Length;

    int Iteration;

    float f(float3 p) 
    {
        p.z -= Time.Compute();
        float a = p.z * .1;
        p.xy = mul(p.xy, float2x2(cos(a), sin(a), -sin(a), cos(a))) * Scale.Compute();
        return .1 - length(cos(p.xy) + sin(p.yz)) * Length.Compute();
    }

    stage override float4 Shading()
    {
        float2 uv = streams.TexCoord * ViewSize;
        float3 d = 0.5 - float3(uv, 1) / ViewSize.yyy;
        float3 p;
        for (int i = 0; i < Iteration; i++) 
            p += f(p) * d ;

        float3 n = (sin(p) + float3(2, 5, 9)) / length(p);
        return lerp(ColorA.Compute(), ColorB.Compute(), GetLuminance(n) );
    }
};