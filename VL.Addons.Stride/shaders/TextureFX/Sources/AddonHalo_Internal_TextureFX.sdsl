// source:
// https://github.com/mrvux/dx11-vvvv-girlpower/blob/master/nodes/texture11/Source/Halo.tfx

[TextureSource]
[Category("Source")]
[Summary("Returns a halo texture")]
shader AddonHalo_Internal_TextureFX : TextureFX, AddonShaderUtils, Spectral
{

    [Default(0.0f)]
	compose ComputeFloat InnerRadius;

    [Default(0.5f)]
	compose ComputeFloat OuterRadius;
    
    [EnumType("VL.Stride.Effects.TextureFX.HaloType")]
    int HaloType = 0;

    [EnumType("VL.Stride.Effects.TextureFX.GradientType, TextureFX")]
    int GradientType;
    
    [Default(0.0f, 0.0f, 0.0f, 1.0f)]
    compose ComputeColor BackgroundColor;

    [Default(1.0f, 1.0f, 1.0f, 1.0f)]
    compose ComputeColor HaloColor;

    
    [Default(0.5f)]
	compose ComputeFloat Gamma;

    float4x4 Transform;

    float4 Linear(float f, float g, float4 bgc, float4 hc)
    {
        f = pow(f, g);
        
        float4 c;
        
        switch(GradientType)
        {
            case 0 : c = lerp(hc, bgc, f); break;
            case 1 : c = spectral_lerp(hc, bgc, f); break;
        }
        
        return c;
    }

    float4 Smooth(float f, float g, float4 bgc, float4 hc)
    {
        f = smoothstep(0,1,f);
        f = pow(f, g);

        float4 c;
        
        switch(GradientType)
        {
            case 0 : c = lerp(hc, bgc, f); break;
            case 1 : c = spectral_lerp(hc, bgc, f); break;
        }
        
        return c;;
    }
    
    stage override float4 Shading()
    {
        
        float2 uv = TransformUV(streams.TexCoord, Transform);

        float innerRadius = InnerRadius.Compute();
        float outerRadius = OuterRadius.Compute();
        float gamma = Gamma.Compute();

        float4 bgColor = BackgroundColor.Compute();
        float4 haloColor = HaloColor.Compute();

        float4 col = 0;

        float2 targetSize = ViewSize;
        float aspect = targetSize.x / targetSize.y;

        uv = (uv-0.5) * float2(aspect, 1) + 0.5;

        float g = gamma/(1.00001-gamma);

        float thickness = outerRadius - innerRadius;
        float halo = clamp(distance(float2(0, 0), uv-0.5)-innerRadius, 0, thickness);
        float f = halo/thickness;

        switch(HaloType)
        {
            case 0 : col = Smooth(f, g, bgColor, haloColor); break;
            case 1 : col = Linear(f, g, bgColor, haloColor); break;
        }

        return col;
    }
};