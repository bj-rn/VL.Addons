[TextureSource]
[Category("Source")]
[Summary("Classic Perlin Noise")]
[DontConvertToSRgbOnWrite]

shader Perlin_Blend_Internal_TextureFX : TextureFX
{
    [Default(1.0f, 1.0f, 1.0f, 1.0f)]
    compose ComputeColor ColorA; 
    
    [Default(0.0f, 0.0f, 0.0f, 1.0f)]
    compose ComputeColor ColorB;
    
    [Default(0.0f)]
    compose ComputeFloat FrequencyBalance;

	[Default(0.0f)]
    compose ComputeFloat Amplitude;

    stage override float4 Shading()
    {
        float2 uv = streams.TexCoord;

	    float sum = 0;

	    sum += Texture0.SampleLevel(LinearSampler, uv, 0).x;
	    sum += Texture1.SampleLevel(LinearSampler, uv, 0).x;
	    sum += Texture2.SampleLevel(LinearSampler, uv, 0).x;
	    sum += Texture3.SampleLevel(LinearSampler, uv, 0).x;
	    sum += Texture4.SampleLevel(LinearSampler, uv, 0).x;
	    sum += Texture5.SampleLevel(LinearSampler, uv, 0).x;
	    sum += Texture6.SampleLevel(LinearSampler, uv, 0).x;
	    sum += Texture7.SampleLevel(LinearSampler, uv, 0).x;
	    sum += Texture8.SampleLevel(LinearSampler, uv, 0).x;
	    sum /= 8;
	
	    sum=sum*Amplitude.Compute()*4/pow(2,3.4*abs(FrequencyBalance.Compute()));

	    float4 c=lerp(ColorA.Compute(), ColorB.Compute(), 0.5 + 0.5 * sum.xxxx);

        return c;
    }
};